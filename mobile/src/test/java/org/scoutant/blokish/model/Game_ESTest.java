/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 24 23:56:31 GMT 2018
 */

package org.scoutant.blokish.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scoutant.blokish.model.Board;
import org.scoutant.blokish.model.Game;
import org.scoutant.blokish.model.Move;
import org.scoutant.blokish.model.Piece;
import org.scoutant.blokish.model.Square;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 20, 20);
      Square square0 = new Square(0, 1);
      Piece piece1 = piece0.add(square0);
      int int0 = game0.scoreEnemySeedsIfAdding(1, piece1, 10, (-469));
      assertEquals(1, int0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 1, 1);
      Square square0 = new Square(1, 0, (-1082));
      piece0.add(square0);
      Move move0 = new Move(piece0, 0, 20, (-1585));
      int int0 = game0.scoreEnemySeedsIfAdding(20, move0.ghost, 20, (-1303));
      assertEquals(1, int0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      Board board0 = new Board(160);
      linkedList0.add(board0);
      Piece piece0 = new Piece(20, "sc", 1, 1);
      int int0 = game0.scoreEnemySeedsIfAdding((-1369), piece0, 0, (-1585));
      assertEquals(20, game0.size);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      // Undeclared exception!
      try { 
        game0.winner();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.valid((Piece) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, 20, "sc", 20, 20);
      // Undeclared exception!
      try { 
        game0.valid(piece0, 20, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece((-1), 0, "sc", (-1), 16);
      // Undeclared exception!
      try { 
        game0.valid(piece0, 5, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 16, 20);
      game0.add(piece0, 20, 20);
      Move move0 = new Move(piece0, 16, 20, (-857));
      // Undeclared exception!
      game0.valid(move0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.valid((Move) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      Piece piece0 = new Piece(20, "sc", 1, 1);
      Move move0 = new Move(piece0, 0, 20, (-1585));
      // Undeclared exception!
      try { 
        game0.valid(move0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece((-2), 3, "sc", 3, 3);
      Move move0 = new Move(piece0, (-2), 3);
      move0.i = 20;
      // Undeclared exception!
      try { 
        game0.valid(move0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Move> linkedList0 = new LinkedList<Move>();
      linkedList0.add((Move) null);
      game0.moves = (List<Move>) linkedList0;
      // Undeclared exception!
      try { 
        game0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Move", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(902, "sc", 2, 2);
      // Undeclared exception!
      game0.scoreEnemySeedsIfAdding(3349, piece0, 0, (-1465));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.scoreEnemySeedsIfAdding(0, (Piece) null, 0, 2131558402);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      Piece piece0 = new Piece(20, "sc", 0, 2308);
      // Undeclared exception!
      try { 
        game0.scoreEnemySeedsIfAdding(0, piece0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(10, "sc", 20, 20);
      int[][] intArray0 = new int[6][8];
      game0.ab = intArray0;
      // Undeclared exception!
      try { 
        game0.scoreEnemySeedsIfAdding(0, piece0, 673, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Move> linkedList0 = new LinkedList<Move>();
      Piece piece0 = new Piece(20, "", 20, 20);
      Move move0 = new Move(piece0, 20, 20, 20);
      linkedList0.add(move0);
      // Undeclared exception!
      try { 
        game0.replay(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(0, "sc", 20, 0);
      piece0.color = (-1757);
      Move move0 = new Move(piece0, 0, 364, 20);
      game0.historize(move0);
      // Undeclared exception!
      try { 
        game0.replay(game0.moves);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 16, 20);
      game0.add(piece0, 20, 3);
      Move move0 = new Move(piece0, 3, 16, 20);
      // Undeclared exception!
      game0.play(move0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.play((Move) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(2, "sc", 836, 836);
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      Move move0 = new Move(piece0, 836, 2224);
      // Undeclared exception!
      try { 
        game0.play(move0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(5, "sc", 2683, 2683);
      Piece piece1 = piece0.flip();
      piece1.color = (-1958);
      Move move0 = new Move(piece1, 0, 20, 10);
      // Undeclared exception!
      try { 
        game0.play(move0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Game game0 = new Game();
      game0.boards = null;
      // Undeclared exception!
      try { 
        game0.over();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      // Undeclared exception!
      try { 
        game0.over();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 1, 1);
      game0.moves = null;
      Move move0 = new Move(piece0, 0, 20, (-1585));
      // Undeclared exception!
      try { 
        game0.historize(move0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 16, 20);
      game0.add(piece0, 20, 3);
      // Undeclared exception!
      game0.fits(piece0, 15, 16);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.fits((Piece) null, 20, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      Piece piece0 = new Piece(20, "sc", 1, 1);
      // Undeclared exception!
      try { 
        game0.fits(piece0, 1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 20, 20);
      game0.fits(piece0, 0, 0);
      // Undeclared exception!
      game0.add(piece0, 10, 2131558402);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.add((Piece) null, 55, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Board> linkedList0 = new LinkedList<Board>();
      game0.boards = (List<Board>) linkedList0;
      Piece piece0 = new Piece(20, "sc", 1, 1);
      Move move0 = new Move(piece0, 0, 20, (-1585));
      // Undeclared exception!
      try { 
        game0.add(move0.ghost, 16, 2299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 1, 1);
      Square square0 = new Square(1, 0, (-1082));
      Piece piece1 = piece0.add(square0);
      Move move0 = new Move(piece1, 0, 20, (-1585));
      boolean boolean0 = game0.fits(move0.ghost, 1, 20);
      assertEquals(20, game0.size);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 20, 20);
      Square square0 = new Square(0, 1);
      Piece piece1 = piece0.add(square0);
      boolean boolean0 = game0.valid(piece1, 20, 20);
      assertFalse(boolean0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(27, "", 0, 0);
      boolean boolean0 = game0.valid(piece0, 0, 0);
      assertEquals(20, game0.size);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Game game0 = new Game();
      game0.reset();
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Game game0 = new Game();
      String string0 = game0.toString();
      assertEquals(20, game0.size);
      assertEquals("# moves : 0", string0);
  }
/*
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "L4", 563, 182);
      Move move0 = new Move(piece0, piece0.flips, piece0.flips, piece0.flips);
      // Undeclared exception!
      try { 
        game0.play(move0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }
*/
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "}", 20, 2282);
      Move move0 = new Move(piece0, 20, 2442);
      boolean boolean0 = game0.valid(move0);
      assertFalse(boolean0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "}", 20, 2282);
      Move move0 = new Move(piece0, 20, 2442);
      game0.add(move0.ghost, 6, (-4278));
      // Undeclared exception!
      game0.valid(move0.piece, 20, 0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, 20, "sc", 20, 20);
      Move move0 = new Move(piece0, (-1102), 364, (-35));
      game0.historize(move0);
      // Undeclared exception!
      try { 
        game0.replay(game0.moves);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Game game0 = new Game();
      boolean boolean0 = game0.replay(game0.moves);
      assertEquals(20, game0.size);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Game game0 = new Game();
      int int0 = game0.winner();
      assertEquals(20, game0.size);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Game game0 = new Game();
      boolean boolean0 = game0.over();
      assertFalse(boolean0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 1, 1);
      Move move0 = new Move(piece0, 0, 20, (-1585));
      game0.historize(move0);
      String string0 = game0.toString();
      assertEquals("# moves : 1\n0:20:0:sc", string0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Game game0 = new Game();
      List<Move> list0 = game0.deserialize(">xS5W-I1d8XEeO0.");
      assertEquals(20, game0.size);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 1, 1);
      Move move0 = new Move(piece0, 0, 20, (-1585));
      boolean boolean0 = game0.valid(move0);
      assertEquals(20, game0.size);
      assertFalse(boolean0);
  }
}

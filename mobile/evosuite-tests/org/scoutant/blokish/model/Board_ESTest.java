/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 22 19:58:22 GMT 2018
 */

package org.scoutant.blokish.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scoutant.blokish.model.Board;
import org.scoutant.blokish.model.Piece;
import org.scoutant.blokish.model.Square;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true, useSeparateClassloader=false) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      Board board0 = new Board(1);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertNotNull(piece0);
      assertEquals("I4", piece0.toLabel());
      
      int int1 = 1;
      Piece piece1 = piece0.rotate(1);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.color);
      assertNotNull(piece1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      board0.add(piece1, (-1), 3938);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.color);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = piece1.squares((-1529));
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.color);
      assertNotNull(list0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string0 = Piece.serialize(piece0);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertNotNull(string0);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.color);
      assertNotNull(string1);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(1, piece0.color);
      assertFalse(boolean0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      
      Square square0 = new Square(4, (-1454), 0);
      assertEquals(4, square0.i);
      assertEquals((-1454), square0.j);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      // Undeclared exception!
      try { 
        piece0.add(square0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Board board0 = new Board(1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I3");
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertNotNull(piece0);
      assertEquals("I3", piece0.toLabel());
      
      Piece piece1 = piece0.rotate(1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertNotNull(piece1);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = piece1.squares(3);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertNotNull(list0);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string0 = Piece.serialize(piece0);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertNotNull(string0);
      assertEquals("1:I3:-1,0:0,0:1,0", string0);
      assertEquals("I3", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece0);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertNotNull(string1);
      assertEquals("1:I3:-1,0:0,0:1,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I3", piece0.toLabel());
      assertSame(piece0, piece1);
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertFalse(boolean0);
      assertEquals("I3", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      
      Square square0 = new Square(3, (-1454), 0);
      assertEquals(3, square0.i);
      assertEquals((-1454), square0.j);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      Piece piece2 = piece1.flip();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertEquals(1, piece2.color);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.size);
      assertEquals(2, piece2.rotations);
      assertEquals(3, piece2.count);
      assertNotNull(piece2);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertEquals("I3", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      
      Piece piece3 = board0.findPieceByType((String) null);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertNull(piece3);
      
      boolean boolean1 = board0.overlaps((-1206), piece1, 3, 1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      board0.add(piece1, 3, 1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      board0.add(piece1, 1, (-2109));
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      int int0 = board0.scoreSeedsIfAdding(piece1, 1, 91);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertEquals(5, int0);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      String string2 = board0.toString();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = board0.toString(1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(string3);
      assertEquals("0 | 1 | 2 | 2 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Piece piece4 = piece1.rotate(3);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertEquals(2, piece4.rotations);
      assertEquals(1, piece4.color);
      assertEquals(3, piece4.size);
      assertEquals(3, piece4.count);
      assertEquals(1, piece4.flips);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertNotNull(piece4);
      assertEquals("I3", piece4.toLabel());
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece4, piece1);
      assertSame(piece4, piece2);
      assertSame(piece4, piece0);
      assertSame(piece0, piece4);
      assertSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece1, piece4);
      
      int int1 = board0.scoreSeedsIfAdding(piece4, (-121), 2);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertEquals(2, piece4.rotations);
      assertEquals(1, piece4.color);
      assertEquals(3, piece4.size);
      assertEquals(3, piece4.count);
      assertEquals(1, piece4.flips);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertEquals(5, int1);
      assertTrue(int1 == int0);
      assertEquals("I3", piece4.toLabel());
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece4, piece1);
      assertSame(piece4, piece2);
      assertSame(piece4, piece0);
      assertSame(piece0, piece4);
      assertSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece1, piece4);
      
      int int2 = board0.scoreSeedsIfAdding(piece2, (-298), 1);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertEquals(1, piece2.color);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.size);
      assertEquals(2, piece2.rotations);
      assertEquals(3, piece2.count);
      assertEquals(5, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertEquals("I3", piece2.toLabel());
      assertSame(piece0, piece4);
      assertSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece1, piece4);
      assertSame(piece2, piece4);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      
      String string4 = board0.toString();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = board0.toString();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = board0.fits(20, piece4, 3, 3);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(6, board0.score);
      assertEquals(1, board0.color);
      assertEquals(2, piece4.rotations);
      assertEquals(1, piece4.color);
      assertEquals(3, piece4.size);
      assertEquals(3, piece4.count);
      assertEquals(1, piece4.flips);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece1.count);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("I3", piece4.toLabel());
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece4, piece1);
      assertSame(piece4, piece2);
      assertSame(piece4, piece0);
      assertSame(piece0, piece4);
      assertSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece1, piece4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Board board0 = new Board(1);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertNotNull(piece0);
      assertEquals("I4", piece0.toLabel());
      
      Piece piece1 = piece0.rotate(1);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertNotNull(piece1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = piece0.seeds();
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertNotNull(list0);
      assertEquals("I4", piece0.toLabel());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(piece0, piece1);
      
      String string0 = Piece.serialize(piece0);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertNotNull(string0);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece1);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertNotNull(string1);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertFalse(boolean0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      
      piece1.flips = 0;
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      
      Square square0 = new Square(4, (-1454), 0);
      assertEquals(4, square0.i);
      assertEquals((-1454), square0.j);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      board0.add(piece1, 4, 0);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(4, board0.score);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      board0.add(piece1, 1, (-2109));
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Piece> list2 = board0.pieces;
      assertNotNull(list2);
      assertFalse(list2.contains(piece0));
      assertFalse(list2.isEmpty());
      assertEquals(20, list2.size());
      
      board0.pieces = list2;
      assertFalse(list2.isEmpty());
      assertEquals(20, list2.size());
      assertFalse(board0.pieces.isEmpty());
      assertEquals(20, board0.pieces.size());
      
      int int0 = board0.scoreSeedsIfAdding(piece1, 1, 91);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(3, int0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string2 = board0.toString();
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = board0.toString(1);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(string3);
      assertEquals("0 | 0 | 2 | 3 | 3 | 3 | 3 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Piece piece2 = piece1.rotate(4);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, piece2.flips);
      assertEquals(1, piece2.color);
      assertEquals(2, piece2.rotations);
      assertEquals(4, piece2.size);
      assertEquals(4, piece2.count);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertNotNull(piece2);
      assertEquals("I4", piece2.toLabel());
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      int int1 = board0.scoreSeedsIfAdding(piece2, (-121), 2);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, piece2.flips);
      assertEquals(1, piece2.color);
      assertEquals(2, piece2.rotations);
      assertEquals(4, piece2.size);
      assertEquals(4, piece2.count);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertEquals("I4", piece2.toLabel());
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      String string4 = board0.toString();
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int2 = board0.scoreSeedsIfAdding(piece1, (-298), 0);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(3, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      String string5 = board0.toString();
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = board0.toString();
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      
      Piece piece3 = board0.findPieceByType("1:I4:-1,0:0,0:1,0:2,0");
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNull(piece3);
      
      List<Square> list3 = board0.seeds();
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(list3);
      assertFalse(list3.contains(square0));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list0));
      assertEquals(3, list3.size());
      assertFalse(list3.isEmpty());
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      
      board0.add(piece0, 0, 0);
      assertEquals(12, board0.score);
      assertEquals(1, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(1, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      Board board0 = new Board(1);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I3");
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertNotNull(piece0);
      assertEquals("I3", piece0.toLabel());
      
      int int1 = 1;
      Piece piece1 = piece0.rotate(1);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(1, piece1.color);
      assertEquals(3, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.flips);
      assertNotNull(piece1);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = piece1.squares(3);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(1, piece1.color);
      assertEquals(3, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.flips);
      assertNotNull(list0);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string0 = Piece.serialize(piece0);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertNotNull(string0);
      assertEquals("1:I3:-1,0:0,0:1,0", string0);
      assertEquals("I3", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece0);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertNotNull(string1);
      assertEquals("1:I3:-1,0:0,0:1,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I3", piece0.toLabel());
      assertSame(piece0, piece1);
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertFalse(boolean0);
      assertEquals("I3", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      
      Piece piece2 = piece1.flip();
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(1, piece1.color);
      assertEquals(3, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.flips);
      assertEquals(3, piece2.size);
      assertEquals(1, piece2.color);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.count);
      assertEquals(2, piece2.rotations);
      assertNotNull(piece2);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertEquals("I3", piece2.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      
      Piece piece3 = board0.findPieceByType((String) null);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertNull(piece3);
      
      boolean boolean1 = board0.overlaps((-1206), piece1, 3, 1);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(1, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.count);
      assertEquals(1, piece1.color);
      assertEquals(3, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.flips);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("I3", piece0.toLabel());
      assertEquals("I3", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 3;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 3;
      intArray1[4] = 875;
      intArray1[5] = 14;
      intArray0[0] = intArray1;
      board0.ij = intArray0;
      // Undeclared exception!
      try { 
        board0.add(piece1, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Board board0 = new Board(1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertNotNull(piece0);
      assertEquals("I4", piece0.toLabel());
      
      Piece piece1 = piece0.rotate(1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertNotNull(piece1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = piece0.seeds();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertNotNull(list0);
      assertEquals("I4", piece0.toLabel());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertSame(piece0, piece1);
      
      String string0 = Piece.serialize(piece0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertNotNull(string0);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertNotNull(string1);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertFalse(boolean0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(1, board0.color);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      
      Square square0 = new Square(4, (-1454), 0);
      assertEquals(4, square0.i);
      assertEquals(0, square0.value);
      assertEquals((-1454), square0.j);
      assertNotNull(square0);
      
      board0.add(piece1, 4, 1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      board0.add(piece1, 1, (-2109));
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      int int0 = board0.scoreSeedsIfAdding(piece1, 1, 91);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals(5, int0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string2 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = board0.toString(1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNotNull(string3);
      assertEquals("0 | 0 | 1 | 2 | 2 | 2 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Piece piece2 = piece1.rotate(4);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals(4, piece2.count);
      assertEquals(2, piece2.rotations);
      assertEquals(4, piece2.size);
      assertEquals(1, piece2.flips);
      assertEquals(1, piece2.color);
      assertNotNull(piece2);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertEquals("I4", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      int int1 = board0.scoreSeedsIfAdding(piece2, (-121), 2);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals(4, piece2.count);
      assertEquals(2, piece2.rotations);
      assertEquals(4, piece2.size);
      assertEquals(1, piece2.flips);
      assertEquals(1, piece2.color);
      assertEquals(5, int1);
      assertTrue(int1 == int0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertEquals("I4", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      String string4 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int2 = board0.scoreSeedsIfAdding(piece1, (-298), 1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals(4, piece1.size);
      assertEquals(1, piece1.color);
      assertEquals(4, piece1.count);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals(5, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      
      String string5 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      Piece piece3 = board0.findPieceByType("1:I4:-1,0:0,0:1,0:2,0");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNull(piece3);
      
      List<Square> list2 = board0.seeds();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertNotNull(list2);
      assertFalse(list2.contains(square0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertEquals(5, list2.size());
      assertFalse(list2.isEmpty());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      board0.add(piece0, 1, 1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(12, board0.score);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.color);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      Board board0 = new Board(1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertNotNull(piece0);
      assertEquals("I4", piece0.toLabel());
      
      int int1 = 1;
      Piece piece1 = piece0.rotate(1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(2, piece1.rotations);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertNotNull(piece1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.overlaps((-3298), piece0, 1, 1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertFalse(boolean0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      piece1.color = 1859;
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      
      List<Square> list0 = piece1.squares((-1529));
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(1859, piece0.color);
      assertEquals(1, piece1.flips);
      assertEquals(1859, piece1.color);
      assertEquals(2, piece1.rotations);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertNotNull(list0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string0 = Piece.serialize(piece0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(1859, piece0.color);
      assertNotNull(string0);
      assertEquals("1859:I4:-1,0:0,0:1,0:2,0", string0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(1859, piece0.color);
      assertEquals(1, piece1.flips);
      assertEquals(1859, piece1.color);
      assertEquals(2, piece1.rotations);
      assertEquals(4, piece1.size);
      assertEquals(4, piece1.count);
      assertNotNull(string1);
      assertEquals("1859:I4:-1,0:0,0:1,0:2,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean1 = board0.fits(2, piece0, 0, 2);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(2, piece0.rotations);
      assertEquals(1859, piece0.color);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      
      Square square0 = new Square(4, (-1454), 0);
      assertEquals(4, square0.i);
      assertEquals(0, square0.value);
      assertEquals((-1454), square0.j);
      assertNotNull(square0);
      
      // Undeclared exception!
      try { 
        piece0.add(square0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Board board0 = new Board(0);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, board0.color);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("S4");
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(3, piece0.size);
      assertEquals(2, piece0.flips);
      assertEquals(0, piece0.color);
      assertNotNull(piece0);
      assertEquals("S4", piece0.toLabel());
      
      Piece piece1 = piece0.clone();
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(3, piece0.size);
      assertEquals(2, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece1.color);
      assertEquals(2, piece1.flips);
      assertEquals(3, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("S4", piece0.toLabel());
      assertEquals("S4", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      boolean boolean0 = board0.onseed(piece1, 3, 10);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, board0.color);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(3, piece0.size);
      assertEquals(2, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece1.color);
      assertEquals(2, piece1.flips);
      assertEquals(3, piece1.size);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertFalse(boolean0);
      assertTrue(piece0.equals((Object)piece1));
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("S4", piece0.toLabel());
      assertEquals("S4", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      int int0 = 0;
      int int1 = 203;
      int int2 = (-3557);
      Piece piece2 = new Piece(21, "T4", (-952), 0);
      assertEquals(0, piece2.count);
      assertEquals((-952), piece2.rotations);
      assertEquals(0, piece2.color);
      assertEquals(21, piece2.size);
      assertEquals(0, piece2.flips);
      assertNotNull(piece2);
      assertFalse(piece2.equals((Object)piece0));
      assertFalse(piece2.equals((Object)piece1));
      assertEquals("T4", piece2.toLabel());
      
      // Undeclared exception!
      try { 
        piece2.add(203, 3044);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Board board0 = new Board(107);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("V5");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(0, board0.score);
      assertEquals(107, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertNotNull(piece0);
      assertEquals("V5", piece0.toLabel());
      
      int int0 = board0.scoreSeedsIfAdding(piece0, 3, 4);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(0, board0.score);
      assertEquals(107, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(5, int0);
      assertEquals("V5", piece0.toLabel());
      
      boolean boolean0 = board0.onseed(piece0, 3, 0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(0, board0.score);
      assertEquals(107, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertFalse(boolean0);
      assertEquals("V5", piece0.toLabel());
      
      String string0 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(string0);
      
      piece0.flips = 5;
      assertEquals("V5", piece0.toLabel());
      
      String string1 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      board0.score = 5;
      String string2 = ",`";
      Piece piece1 = piece0.clone();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, board0.score);
      assertEquals(107, piece0.color);
      assertEquals(5, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(5, piece1.flips);
      assertEquals(3, piece1.size);
      assertEquals(4, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(5, piece1.count);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("V5", piece0.toLabel());
      assertEquals("V5", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      Piece piece2 = board0.findPieceByType("");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, board0.score);
      assertNull(piece2);
      
      Piece piece3 = board0.findPieceByType(",`");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, board0.score);
      assertNull(piece3);
      
      Piece piece4 = board0.findPieceByType("V5");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, board0.score);
      assertEquals(3, piece4.size);
      assertEquals(5, piece4.flips);
      assertEquals(5, piece4.count);
      assertEquals(107, piece4.color);
      assertEquals(4, piece4.rotations);
      assertNotNull(piece4);
      assertTrue(piece4.equals((Object)piece1));
      assertEquals("V5", piece4.toLabel());
      assertSame(piece4, piece0);
      assertNotSame(piece4, piece1);
      
      int int1 = (-2377);
      board0.add(piece0, 524, 3);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(10, board0.score);
      assertEquals(107, piece0.color);
      assertEquals(5, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertTrue(piece0.equals((Object)piece1));
      assertEquals("V5", piece0.toLabel());
      assertSame(piece0, piece4);
      assertNotSame(piece0, piece1);
      
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 3, (-2377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Board board0 = new Board(1);
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertNotNull(piece0);
      assertEquals("I4", piece0.toLabel());
      
      Piece piece1 = piece0.rotate(1);
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertNotNull(piece1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = piece1.squares((-1529));
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertNotNull(list0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string0 = Piece.serialize(piece0);
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertNotNull(string0);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      String string1 = Piece.serialize(piece1);
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertNotNull(string1);
      assertEquals("1:I4:-1,0:0,0:1,0:2,0", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertFalse(boolean0);
      assertEquals("I4", piece0.toLabel());
      assertSame(piece0, piece1);
      
      List<Square> list1 = board0.seeds();
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      
      Square square0 = new Square(4, (-1454), 0);
      assertEquals((-1454), square0.j);
      assertEquals(0, square0.value);
      assertEquals(4, square0.i);
      assertNotNull(square0);
      
      board0.add(piece1, 4, 1);
      assertEquals(4, board0.score);
      assertEquals(1, board0.color);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      board0.add(piece1, 1, (-2109));
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      int int0 = board0.scoreSeedsIfAdding(piece1, 1, 91);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(5, int0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      String string2 = board0.toString();
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = board0.toString(1);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(string3);
      assertEquals("0 | 0 | 1 | 2 | 2 | 2 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Piece piece2 = piece1.rotate(4);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(1, piece2.color);
      assertEquals(2, piece2.rotations);
      assertEquals(4, piece2.size);
      assertEquals(4, piece2.count);
      assertEquals(1, piece2.flips);
      assertNotNull(piece2);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertEquals("I4", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      int int1 = board0.scoreSeedsIfAdding(piece2, (-121), 2);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(1, piece2.color);
      assertEquals(2, piece2.rotations);
      assertEquals(4, piece2.size);
      assertEquals(4, piece2.count);
      assertEquals(1, piece2.flips);
      assertEquals(5, int1);
      assertTrue(int1 == int0);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertEquals("I4", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      String string4 = board0.toString();
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int2 = board0.scoreSeedsIfAdding(piece1, (-298), 1);
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, piece0.rotations);
      assertEquals(4, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals(1, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.count);
      assertEquals(2, piece1.rotations);
      assertEquals(1, piece1.color);
      assertEquals(1, piece1.flips);
      assertEquals(4, piece1.size);
      assertEquals(5, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("I4", piece0.toLabel());
      assertEquals("I4", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      
      String string5 = board0.toString();
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = board0.toString();
      assertEquals(1, board0.color);
      assertEquals(8, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      Board board0 = new Board(1);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertNotNull(piece0);
      assertEquals("I4", piece0.toLabel());
      
      int int1 = 1;
      String string0 = Piece.serialize(piece0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertNotNull(string0);
      assertEquals("1:I4:0,-1:0,0:0,1:0,2", string0);
      assertEquals("I4", piece0.toLabel());
      
      boolean boolean0 = board0.fits(2, piece0, 0, 2);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertEquals(4, piece0.size);
      assertEquals(4, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(2, piece0.rotations);
      assertEquals(1, piece0.color);
      assertTrue(boolean0);
      assertEquals("I4", piece0.toLabel());
      
      List<Square> list0 = board0.seeds();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(1, board0.color);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Square square0 = new Square(4, (-1454), 0);
      assertEquals(0, square0.value);
      assertEquals(4, square0.i);
      assertEquals((-1454), square0.j);
      assertNotNull(square0);
      
      // Undeclared exception!
      try { 
        piece0.add(square0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Board board0 = new Board(107);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("V5");
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.size);
      assertEquals(4, piece0.rotations);
      assertEquals(107, piece0.color);
      assertNotNull(piece0);
      assertEquals("V5", piece0.toLabel());
      
      int int0 = board0.scoreSeedsIfAdding(piece0, 3, 4);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.size);
      assertEquals(4, piece0.rotations);
      assertEquals(107, piece0.color);
      assertEquals(5, int0);
      assertEquals("V5", piece0.toLabel());
      
      boolean boolean0 = board0.overlaps(107, piece0, 5, (-12));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.size);
      assertEquals(4, piece0.rotations);
      assertEquals(107, piece0.color);
      assertTrue(boolean0);
      assertEquals("V5", piece0.toLabel());
      
      String string0 = board0.toString();
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(string0);
      
      String string1 = board0.toString();
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      board0.score = 1;
      String string2 = ",`";
      Piece piece1 = piece0.clone();
      assertEquals(1, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(1, piece0.flips);
      assertEquals(3, piece0.size);
      assertEquals(4, piece0.rotations);
      assertEquals(107, piece0.color);
      assertEquals(4, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(3, piece1.size);
      assertEquals(5, piece1.count);
      assertEquals(1, piece1.flips);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("V5", piece0.toLabel());
      assertEquals("V5", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      Piece piece2 = board0.findPieceByType("");
      assertEquals(1, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNull(piece2);
      
      Piece piece3 = board0.findPieceByType(",`");
      assertEquals(1, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNull(piece3);
      
      Piece piece4 = board0.findPieceByType("V5");
      assertEquals(1, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(3, piece4.size);
      assertEquals(107, piece4.color);
      assertEquals(1, piece4.flips);
      assertEquals(5, piece4.count);
      assertEquals(4, piece4.rotations);
      assertNotNull(piece4);
      assertTrue(piece4.equals((Object)piece1));
      assertEquals("V5", piece4.toLabel());
      assertSame(piece4, piece0);
      assertNotSame(piece4, piece1);
      
      int int1 = (-2377);
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 3, (-2377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Board board0 = new Board(107);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("V5");
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertNotNull(piece0);
      assertEquals("V5", piece0.toLabel());
      
      int int0 = 1435;
      int int1 = board0.scoreSeedsIfAdding(piece0, 3, 1435);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals("V5", piece0.toLabel());
      
      boolean boolean0 = board0.onseed(piece0, 3, 0);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertFalse(boolean0);
      assertEquals("V5", piece0.toLabel());
      
      String string0 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(string0);
      
      String string1 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      piece0.rotations = 0;
      assertEquals("V5", piece0.toLabel());
      
      board0.add(piece0, (-3170), 107);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(5, board0.score);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(0, piece0.rotations);
      assertEquals(107, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals("V5", piece0.toLabel());
      
      String string2 = ",`";
      Piece piece1 = piece0.clone();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(5, board0.score);
      assertEquals(107, board0.color);
      assertEquals(5, piece0.count);
      assertEquals(0, piece0.rotations);
      assertEquals(107, piece0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(0, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.flips);
      assertEquals(5, piece1.count);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("V5", piece0.toLabel());
      assertEquals("V5", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      Piece piece2 = board0.findPieceByType("");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(5, board0.score);
      assertEquals(107, board0.color);
      assertNull(piece2);
      
      Piece piece3 = board0.findPieceByType(",`");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(5, board0.score);
      assertEquals(107, board0.color);
      assertNull(piece3);
      
      Piece piece4 = board0.findPieceByType("V5");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(5, board0.score);
      assertEquals(107, board0.color);
      assertNull(piece4);
      
      int int2 = (-2377);
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 3, (-2377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Board board0 = new Board((-22583480));
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("T5");
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertNotNull(piece0);
      assertEquals("T5", piece0.toLabel());
      
      List<Square> list0 = board0.seeds();
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Piece piece1 = piece0.clone();
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(1, piece1.flips);
      assertEquals(5, piece1.count);
      assertEquals(3, piece1.size);
      assertEquals(0, piece1.color);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("T5", piece0.toLabel());
      assertEquals("T5", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      piece0.reset(piece1);
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(1, piece1.flips);
      assertEquals(5, piece1.count);
      assertEquals(3, piece1.size);
      assertEquals(0, piece1.color);
      assertTrue(piece0.equals((Object)piece1));
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("T5", piece0.toLabel());
      assertEquals("T5", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      Piece piece2 = piece0.rotate((-1));
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece2.count);
      assertEquals(4, piece2.rotations);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.size);
      assertEquals((-22583480), piece2.color);
      assertNotNull(piece2);
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(piece2.equals((Object)piece1));
      assertEquals("T5", piece0.toLabel());
      assertEquals("T5", piece2.toLabel());
      assertNotSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      
      Piece piece3 = piece2.flip();
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece2.count);
      assertEquals(4, piece2.rotations);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.size);
      assertEquals((-22583480), piece2.color);
      assertEquals(5, piece3.count);
      assertEquals((-22583480), piece3.color);
      assertEquals(1, piece3.flips);
      assertEquals(4, piece3.rotations);
      assertEquals(3, piece3.size);
      assertNotNull(piece3);
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(piece2.equals((Object)piece1));
      assertFalse(piece3.equals((Object)piece1));
      assertEquals("T5", piece0.toLabel());
      assertEquals("T5", piece2.toLabel());
      assertEquals("T5", piece3.toLabel());
      assertSame(piece0, piece3);
      assertNotSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      assertSame(piece2, piece3);
      assertSame(piece3, piece0);
      assertSame(piece3, piece2);
      assertNotSame(piece3, piece1);
      
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[9];
      intArray1[0] = 5;
      intArray1[1] = 769;
      intArray1[2] = 1;
      intArray1[3] = 21;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = (-22583480);
      intArray1[7] = 5;
      intArray1[8] = 3;
      List<Square> list1 = piece3.seeds();
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece2.count);
      assertEquals(4, piece2.rotations);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.size);
      assertEquals((-22583480), piece2.color);
      assertEquals(5, piece3.count);
      assertEquals((-22583480), piece3.color);
      assertEquals(1, piece3.flips);
      assertEquals(4, piece3.rotations);
      assertEquals(3, piece3.size);
      assertNotNull(list1);
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(piece2.equals((Object)piece1));
      assertFalse(piece3.equals((Object)piece1));
      assertEquals("T5", piece0.toLabel());
      assertEquals(6, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("T5", piece2.toLabel());
      assertEquals("T5", piece3.toLabel());
      assertSame(piece0, piece3);
      assertNotSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertNotSame(list1, list0);
      assertSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      assertSame(piece2, piece3);
      assertSame(piece3, piece0);
      assertSame(piece3, piece2);
      assertNotSame(piece3, piece1);
      
      intArray0[0] = intArray1;
      board0.ab = intArray0;
      boolean boolean0 = board0.overlaps((-22583480), piece3, 2, 1);
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(5, piece0.count);
      assertEquals((-22583480), piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece2.count);
      assertEquals(4, piece2.rotations);
      assertEquals(1, piece2.flips);
      assertEquals(3, piece2.size);
      assertEquals((-22583480), piece2.color);
      assertEquals(5, piece3.count);
      assertEquals((-22583480), piece3.color);
      assertEquals(1, piece3.flips);
      assertEquals(4, piece3.rotations);
      assertEquals(3, piece3.size);
      assertFalse(boolean0);
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(piece2.equals((Object)piece1));
      assertFalse(piece3.equals((Object)piece1));
      assertEquals("T5", piece0.toLabel());
      assertEquals("T5", piece2.toLabel());
      assertEquals("T5", piece3.toLabel());
      assertSame(piece0, piece3);
      assertNotSame(piece0, piece1);
      assertSame(piece0, piece2);
      assertSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      assertSame(piece2, piece3);
      assertSame(piece3, piece0);
      assertSame(piece3, piece2);
      assertNotSame(piece3, piece1);
      
      List<Square> list2 = board0.seeds();
      assertEquals((-22583480), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertNotNull(list2);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding(piece0, (-20569767), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Board board0 = new Board((-817));
      assertFalse(board0.over);
      assertEquals((-817), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      List<Square> list0 = board0.seeds();
      assertFalse(board0.over);
      assertEquals((-817), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Piece piece0 = new Piece((-817), 20, "sc", 20, (-2682));
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals((-817), piece0.color);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      Piece piece1 = piece0.flip();
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals((-817), piece0.color);
      assertEquals((-2682), piece1.flips);
      assertEquals(20, piece1.size);
      assertEquals(0, piece1.count);
      assertEquals((-817), piece1.color);
      assertEquals(20, piece1.rotations);
      assertNotNull(piece1);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list1 = piece0.squares();
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals((-817), piece0.color);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals("sc", piece0.toLabel());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(piece0, piece1);
      assertNotSame(list1, list0);
      
      boolean boolean0 = board0.onseed(piece0, 20, 20);
      assertFalse(board0.over);
      assertEquals((-817), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals((-817), piece0.color);
      assertFalse(boolean0);
      assertEquals("sc", piece0.toLabel());
      assertSame(piece0, piece1);
      
      board0.add(piece1, (-8323580), (-817));
      assertFalse(board0.over);
      assertEquals((-817), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals((-817), piece0.color);
      assertEquals((-2682), piece1.flips);
      assertEquals(20, piece1.size);
      assertEquals(0, piece1.count);
      assertEquals((-817), piece1.color);
      assertEquals(20, piece1.rotations);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Board board0 = new Board((-12));
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals((-12), board0.color);
      assertNotNull(board0);
      
      Square square0 = new Square(0, 0);
      assertEquals(0, square0.j);
      assertEquals(0, square0.i);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      Piece piece0 = new Piece((-1091670721), 0, "a", (-2148), (-2));
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-1091670721), piece0.color);
      assertEquals((-2148), piece0.rotations);
      assertEquals((-2), piece0.flips);
      assertNotNull(piece0);
      assertEquals("a", piece0.toLabel());
      
      boolean boolean0 = board0.fits(0, piece0, 4, 2);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals((-12), board0.color);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-1091670721), piece0.color);
      assertEquals((-2148), piece0.rotations);
      assertEquals((-2), piece0.flips);
      assertTrue(boolean0);
      assertEquals("a", piece0.toLabel());
      
      boolean boolean1 = board0.outside(square0, 0, 6);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals((-12), board0.color);
      assertEquals(0, square0.j);
      assertEquals(0, square0.i);
      assertEquals(0, square0.value);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals((-12), board0.color);
      assertNotNull(string0);
      
      board0.add(piece0, 4, 4);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals((-12), board0.color);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-1091670721), piece0.color);
      assertEquals((-2148), piece0.rotations);
      assertEquals((-2), piece0.flips);
      assertEquals("a", piece0.toLabel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Board board0 = new Board((-4618));
      assertFalse(board0.over);
      assertEquals((-4618), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      int int0 = (-2782);
      Piece piece0 = new Piece(20, "sc", 0, (-2682));
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.size);
      assertEquals((-2682), piece0.flips);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      Piece piece1 = piece0.clone();
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.size);
      assertEquals((-2682), piece0.flips);
      assertEquals(0, piece1.rotations);
      assertEquals((-2682), piece1.flips);
      assertEquals(0, piece1.count);
      assertEquals(20, piece1.size);
      assertEquals(0, piece1.color);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      boolean boolean0 = board0.fits((-1250), piece0, 20, 18);
      assertFalse(board0.over);
      assertEquals((-4618), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.size);
      assertEquals((-2682), piece0.flips);
      assertTrue(boolean0);
      assertTrue(piece0.equals((Object)piece1));
      assertEquals("sc", piece0.toLabel());
      assertNotSame(piece0, piece1);
      
      piece0.flips = 4;
      assertEquals("sc", piece0.toLabel());
      
      piece0.type = "3";
      assertEquals("3", piece0.toLabel());
      
      LinkedList<Piece> linkedList0 = new LinkedList<Piece>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(piece0));
      assertEquals(0, linkedList0.size());
      
      board0.pieces = (List<Piece>) linkedList0;
      assertEquals(0, linkedList0.size());
      assertEquals(0, board0.pieces.size());
      assertTrue(board0.pieces.isEmpty());
      
      Piece piece2 = piece0.clone();
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.size);
      assertEquals(4, piece0.flips);
      assertEquals(0, piece2.color);
      assertEquals(20, piece2.size);
      assertEquals(4, piece2.flips);
      assertEquals(0, piece2.count);
      assertEquals(0, piece2.rotations);
      assertNotNull(piece2);
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(piece2.equals((Object)piece1));
      assertEquals("3", piece0.toLabel());
      assertEquals("3", piece2.toLabel());
      assertNotSame(piece0, piece2);
      assertNotSame(piece0, piece1);
      assertNotSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      
      boolean boolean1 = board0.overlaps(0, piece2, 0, (-4618));
      assertFalse(board0.over);
      assertEquals((-4618), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.size);
      assertEquals(4, piece0.flips);
      assertEquals(0, piece2.color);
      assertEquals(20, piece2.size);
      assertEquals(4, piece2.flips);
      assertEquals(0, piece2.count);
      assertEquals(0, piece2.rotations);
      assertFalse(boolean1);
      assertTrue(piece0.equals((Object)piece2));
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(piece2.equals((Object)piece1));
      assertTrue(piece2.equals((Object)piece0));
      assertFalse(boolean1 == boolean0);
      assertEquals("3", piece0.toLabel());
      assertEquals("3", piece2.toLabel());
      assertNotSame(piece0, piece2);
      assertNotSame(piece0, piece1);
      assertNotSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      
      String string0 = board0.toString();
      assertFalse(board0.over);
      assertEquals((-4618), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string0);
      
      boolean boolean2 = board0.fits(1902, piece2, 0, 20);
      assertFalse(board0.over);
      assertEquals((-4618), board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.size);
      assertEquals(4, piece0.flips);
      assertEquals(0, piece2.color);
      assertEquals(20, piece2.size);
      assertEquals(4, piece2.flips);
      assertEquals(0, piece2.count);
      assertEquals(0, piece2.rotations);
      assertTrue(boolean2);
      assertTrue(piece0.equals((Object)piece2));
      assertFalse(piece0.equals((Object)piece1));
      assertFalse(piece2.equals((Object)piece1));
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("3", piece0.toLabel());
      assertEquals("3", piece2.toLabel());
      assertNotSame(piece0, piece2);
      assertNotSame(piece0, piece1);
      assertNotSame(piece2, piece0);
      assertNotSame(piece2, piece1);
      
      Square square0 = new Square(20, 3588, 0);
      assertEquals(20, square0.i);
      assertEquals(3588, square0.j);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      square0.i = 0;
      // Undeclared exception!
      try { 
        piece2.add(square0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Board board0 = new Board(107);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("V5");
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(5, piece0.count);
      assertNotNull(piece0);
      assertEquals("V5", piece0.toLabel());
      
      int int0 = 1435;
      int int1 = board0.scoreSeedsIfAdding(piece0, 3, 1435);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(5, piece0.count);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals("V5", piece0.toLabel());
      
      boolean boolean0 = board0.onseed(piece0, 3, 0);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(5, piece0.count);
      assertFalse(boolean0);
      assertEquals("V5", piece0.toLabel());
      
      String string0 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(string0);
      
      String string1 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      List<Square> list0 = piece0.squares();
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(107, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(5, piece0.count);
      assertNotNull(list0);
      assertEquals("V5", piece0.toLabel());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      
      board0.score = 1435;
      String string2 = ",`";
      Piece piece1 = piece0.clone();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1435, board0.score);
      assertEquals(107, board0.color);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.flips);
      assertEquals(107, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(5, piece0.count);
      assertEquals(5, piece1.count);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(1, piece1.flips);
      assertEquals(0, piece1.color);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("V5", piece0.toLabel());
      assertEquals("V5", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      Piece piece2 = board0.findPieceByType("");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1435, board0.score);
      assertEquals(107, board0.color);
      assertNull(piece2);
      
      Piece piece3 = board0.findPieceByType(",`");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1435, board0.score);
      assertEquals(107, board0.color);
      assertNull(piece3);
      
      Piece piece4 = board0.findPieceByType("V5");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1435, board0.score);
      assertEquals(107, board0.color);
      assertEquals(107, piece4.color);
      assertEquals(1, piece4.flips);
      assertEquals(5, piece4.count);
      assertEquals(4, piece4.rotations);
      assertEquals(3, piece4.size);
      assertNotNull(piece4);
      assertTrue(piece4.equals((Object)piece1));
      assertEquals("V5", piece4.toLabel());
      assertNotSame(piece4, piece1);
      assertSame(piece4, piece0);
      
      int int2 = (-2377);
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 3, (-2377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Board board0 = new Board(272);
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      List<Piece> list0 = board0.pieces;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(21, list0.size());
      
      board0.pieces = list0;
      assertFalse(list0.isEmpty());
      assertEquals(21, list0.size());
      assertFalse(board0.pieces.isEmpty());
      assertEquals(21, board0.pieces.size());
      
      List<Square> list1 = board0.seeds();
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string0 = board0.toString();
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(string0);
      
      Piece piece0 = new Piece(0, 3, string0, 4, (-409));
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertNotNull(piece0);
      
      Piece piece1 = piece0.rotate((-1));
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals((-409), piece1.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertNotNull(piece1);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      Piece piece2 = piece1.clone();
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals((-409), piece1.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(0, piece2.count);
      assertEquals(3, piece2.size);
      assertEquals((-409), piece2.flips);
      assertEquals(0, piece2.color);
      assertEquals(4, piece2.rotations);
      assertNotNull(piece2);
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece1));
      assertNotSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertNotSame(piece1, piece2);
      assertNotSame(piece2, piece1);
      assertNotSame(piece2, piece0);
      
      piece2.color = 11;
      boolean boolean0 = board0.overlaps(3, piece2, 0, 0);
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals((-409), piece1.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(0, piece2.count);
      assertEquals(3, piece2.size);
      assertEquals((-409), piece2.flips);
      assertEquals(11, piece2.color);
      assertEquals(4, piece2.rotations);
      assertFalse(boolean0);
      assertTrue(piece0.equals((Object)piece2));
      assertTrue(piece1.equals((Object)piece2));
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece1));
      assertNotSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertNotSame(piece1, piece2);
      assertNotSame(piece2, piece1);
      assertNotSame(piece2, piece0);
      
      board0.nbPieces = (-2175);
      boolean boolean1 = board0.overlaps(0, piece2, 4, 0);
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals((-2175), board0.nbPieces);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals((-409), piece1.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(0, piece2.count);
      assertEquals(3, piece2.size);
      assertEquals((-409), piece2.flips);
      assertEquals(11, piece2.color);
      assertEquals(4, piece2.rotations);
      assertFalse(boolean1);
      assertTrue(piece0.equals((Object)piece2));
      assertTrue(piece1.equals((Object)piece2));
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertNotSame(piece1, piece2);
      assertNotSame(piece2, piece1);
      assertNotSame(piece2, piece0);
      
      board0.add(piece2, 4, 4);
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals((-2175), board0.nbPieces);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals((-409), piece1.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(0, piece2.count);
      assertEquals(3, piece2.size);
      assertEquals((-409), piece2.flips);
      assertEquals(11, piece2.color);
      assertEquals(4, piece2.rotations);
      assertTrue(piece0.equals((Object)piece2));
      assertTrue(piece1.equals((Object)piece2));
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece1));
      assertNotSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertNotSame(piece1, piece2);
      assertNotSame(piece2, piece1);
      assertNotSame(piece2, piece0);
      
      Piece piece3 = board0.findPieceByType("sc");
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals((-2175), board0.nbPieces);
      assertNull(piece3);
      
      boolean boolean2 = board0.fits(0, piece2, 0, 3);
      assertEquals(272, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals((-2175), board0.nbPieces);
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals((-409), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals((-409), piece1.flips);
      assertEquals(4, piece1.rotations);
      assertEquals(3, piece1.size);
      assertEquals(0, piece2.count);
      assertEquals(3, piece2.size);
      assertEquals((-409), piece2.flips);
      assertEquals(11, piece2.color);
      assertEquals(4, piece2.rotations);
      assertTrue(boolean2);
      assertTrue(piece0.equals((Object)piece2));
      assertTrue(piece1.equals((Object)piece2));
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertNotSame(piece1, piece2);
      assertNotSame(piece2, piece1);
      assertNotSame(piece2, piece0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Board board0 = new Board((-195));
      assertEquals(0, board0.score);
      assertEquals((-195), board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      List<Square> list0 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals((-195), board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Square> list1 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals((-195), board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      
      Piece piece0 = new Piece(2735, 2735, " | ", 0, 2735);
      assertEquals(0, piece0.count);
      assertEquals(2735, piece0.size);
      assertEquals(0, piece0.rotations);
      assertEquals(2735, piece0.flips);
      assertEquals(2735, piece0.color);
      assertNotNull(piece0);
      assertEquals(" | ", piece0.toLabel());
      
      Square square0 = new Square(0, 0, 227);
      assertEquals(227, square0.value);
      assertEquals(0, square0.i);
      assertEquals(0, square0.j);
      assertNotNull(square0);
      
      piece0.flips = (-692);
      assertEquals(" | ", piece0.toLabel());
      
      List<Square> list2 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals((-195), board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list2);
      assertFalse(list2.contains(square0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      boolean boolean0 = board0.outside(square0, 0, 0);
      assertEquals(0, board0.score);
      assertEquals((-195), board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(227, square0.value);
      assertEquals(0, square0.i);
      assertEquals(0, square0.j);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Board board0 = new Board(6071);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertEquals(6071, board0.color);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 6071;
      intArray1[1] = 3324;
      intArray1[2] = 0;
      intArray1[3] = 6071;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 21;
      intArray3[1] = 3324;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 20;
      intArray3[5] = 6071;
      intArray3[6] = 0;
      intArray3[7] = 21;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 6071;
      intArray4[1] = 21;
      intArray4[2] = 3324;
      intArray4[3] = 20;
      intArray4[4] = 6071;
      intArray4[5] = (-2);
      intArray0[3] = intArray4;
      board0.ij = intArray0;
      // Undeclared exception!
      try { 
        board0.seeds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Board board0 = new Board(718);
      assertEquals(718, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      Square square0 = new Square(20, 0);
      assertEquals(20, square0.i);
      assertEquals(0, square0.value);
      assertEquals(0, square0.j);
      assertNotNull(square0);
      
      boolean boolean0 = board0.outside(square0, 718, 0);
      assertEquals(718, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(20, square0.i);
      assertEquals(0, square0.value);
      assertEquals(0, square0.j);
      assertTrue(boolean0);
      
      Piece piece0 = new Piece(0, "sc", (-2106), (-1));
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      String string0 = square0.toString();
      assertEquals(20, square0.i);
      assertEquals(0, square0.value);
      assertEquals(0, square0.j);
      assertNotNull(string0);
      assertEquals("(20, 0) ", string0);
      
      Piece piece1 = piece0.rotate(20);
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertNotNull(piece1);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      Piece piece2 = piece1.flip();
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals(0, piece2.size);
      assertEquals((-1), piece2.flips);
      assertEquals(0, piece2.color);
      assertEquals((-2106), piece2.rotations);
      assertEquals(0, piece2.count);
      assertNotNull(piece2);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      
      piece0.reset(piece1);
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      
      piece1.reset();
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      
      piece2.reset(piece0);
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals(0, piece2.size);
      assertEquals((-1), piece2.flips);
      assertEquals(0, piece2.color);
      assertEquals((-2106), piece2.rotations);
      assertEquals(0, piece2.count);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece2);
      assertSame(piece1, piece0);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      
      Piece piece3 = piece1.flip();
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals((-1), piece3.flips);
      assertEquals((-2106), piece3.rotations);
      assertEquals(0, piece3.count);
      assertEquals(0, piece3.color);
      assertEquals(0, piece3.size);
      assertNotNull(piece3);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece3.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece0, piece3);
      assertSame(piece1, piece2);
      assertSame(piece1, piece3);
      assertSame(piece1, piece0);
      assertSame(piece3, piece2);
      assertSame(piece3, piece1);
      assertSame(piece3, piece0);
      
      boolean boolean1 = board0.onseed(piece2, 0, 1);
      assertEquals(718, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals(0, piece2.size);
      assertEquals((-1), piece2.flips);
      assertEquals(0, piece2.color);
      assertEquals((-2106), piece2.rotations);
      assertEquals(0, piece2.count);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece0, piece3);
      assertSame(piece1, piece2);
      assertSame(piece1, piece3);
      assertSame(piece1, piece0);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      assertSame(piece2, piece3);
      
      piece3.reset(piece2);
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals(0, piece2.size);
      assertEquals((-1), piece2.flips);
      assertEquals(0, piece2.color);
      assertEquals((-2106), piece2.rotations);
      assertEquals(0, piece2.count);
      assertEquals((-1), piece3.flips);
      assertEquals((-2106), piece3.rotations);
      assertEquals(0, piece3.count);
      assertEquals(0, piece3.color);
      assertEquals(0, piece3.size);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece2.toLabel());
      assertEquals("sc", piece3.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece0, piece3);
      assertSame(piece1, piece2);
      assertSame(piece1, piece3);
      assertSame(piece1, piece0);
      assertSame(piece2, piece0);
      assertSame(piece2, piece1);
      assertSame(piece2, piece3);
      assertSame(piece3, piece2);
      assertSame(piece3, piece1);
      assertSame(piece3, piece0);
      
      board0.color = 0;
      List<Square> list0 = piece3.seeds();
      assertEquals(0, piece0.size);
      assertEquals((-1), piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals((-1), piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals((-1), piece3.flips);
      assertEquals((-2106), piece3.rotations);
      assertEquals(0, piece3.count);
      assertEquals(0, piece3.color);
      assertEquals(0, piece3.size);
      assertNotNull(list0);
      assertFalse(list0.contains(square0));
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece3.toLabel());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece0, piece3);
      assertSame(piece1, piece2);
      assertSame(piece1, piece3);
      assertSame(piece1, piece0);
      assertSame(piece3, piece2);
      assertSame(piece3, piece1);
      assertSame(piece3, piece0);
      
      piece3.flips = 0;
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece3.toLabel());
      
      String string1 = board0.toString();
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = board0.toString((-213));
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = board0.outside(square0, 0, 1);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(20, square0.i);
      assertEquals(0, square0.value);
      assertEquals(0, square0.j);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = board0.onseed(piece3, (-2106), 0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.color);
      assertEquals((-2106), piece0.rotations);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals((-2106), piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.flips);
      assertEquals(0, piece1.size);
      assertEquals(0, piece3.flips);
      assertEquals((-2106), piece3.rotations);
      assertEquals(0, piece3.count);
      assertEquals(0, piece3.color);
      assertEquals(0, piece3.size);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals("sc", piece3.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece0, piece3);
      assertSame(piece1, piece2);
      assertSame(piece1, piece3);
      assertSame(piece1, piece0);
      assertSame(piece3, piece2);
      assertSame(piece3, piece1);
      assertSame(piece3, piece0);
      
      boolean boolean4 = board0.outside(square0, 0, 0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(20, square0.i);
      assertEquals(0, square0.value);
      assertEquals(0, square0.j);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      Piece piece4 = board0.findPieceByType("sc");
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNull(piece4);
      
      String string3 = board0.toString();
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      List<Square> list1 = board0.seeds();
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(list1);
      assertFalse(list1.contains(square0));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Board board0 = new Board(355);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(355, board0.color);
      assertNotNull(board0);
      
      int int0 = (-277);
      board0.size = (-277);
      int[][] intArray0 = new int[0][4];
      board0.ab = intArray0;
      String string0 = board0.toString(355);
      assertEquals((-277), board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(355, board0.color);
      assertNotNull(string0);
      assertEquals("", string0);
      
      List<Square> list0 = board0.seeds();
      assertEquals((-277), board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(355, board0.color);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Piece piece0 = board0.findPieceByType("");
      assertEquals((-277), board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(355, board0.color);
      assertNull(piece0);
      
      Piece piece1 = null;
      try {
        piece1 = new Piece((-1562), "Jne:vbL. ", (-78), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Board board0 = new Board((-849));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-849), board0.color);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      List<Square> list0 = board0.seeds();
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-849), board0.color);
      assertFalse(board0.over);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = board0.toString(0);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-849), board0.color);
      assertFalse(board0.over);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Piece piece0 = new Piece((-849), 20, "sc", 20, (-2682));
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertEquals((-849), piece0.color);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      Piece piece1 = piece0.flip();
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertEquals((-849), piece0.color);
      assertEquals((-849), piece1.color);
      assertEquals(20, piece1.size);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.count);
      assertEquals((-2682), piece1.flips);
      assertNotNull(piece1);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.fits((-849), piece1, 0, (-2682));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-849), board0.color);
      assertFalse(board0.over);
      assertEquals((-2682), piece0.flips);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertEquals((-849), piece0.color);
      assertEquals((-849), piece1.color);
      assertEquals(20, piece1.size);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.count);
      assertEquals((-2682), piece1.flips);
      assertFalse(boolean0);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Board board0 = new Board(577);
      assertEquals(0, board0.score);
      assertEquals(577, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      int int0 = 0;
      Board board1 = new Board(20);
      assertFalse(board1.over);
      assertEquals(21, board1.nbPieces);
      assertEquals(20, board1.size);
      assertEquals(20, board1.color);
      assertEquals(0, board1.score);
      assertNotNull(board1);
      assertFalse(board1.equals((Object)board0));
      
      board1.pieces = board0.pieces;
      assertEquals(21, board1.pieces.size());
      assertFalse(board1.pieces.isEmpty());
      
      Piece piece0 = board1.findPieceByType("X5");
      assertFalse(board1.over);
      assertEquals(21, board1.nbPieces);
      assertEquals(20, board1.size);
      assertEquals(20, board1.color);
      assertEquals(0, board1.score);
      assertEquals(577, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.rotations);
      assertNotNull(piece0);
      assertFalse(board1.equals((Object)board0));
      assertEquals("X5", piece0.toLabel());
      assertNotSame(board1, board0);
      
      boolean boolean0 = board1.onseed(piece0, 1, (-2052));
      assertFalse(board1.over);
      assertEquals(21, board1.nbPieces);
      assertEquals(20, board1.size);
      assertEquals(20, board1.color);
      assertEquals(0, board1.score);
      assertEquals(577, piece0.color);
      assertEquals(1, piece0.flips);
      assertEquals(5, piece0.count);
      assertEquals(3, piece0.size);
      assertEquals(1, piece0.rotations);
      assertFalse(boolean0);
      assertFalse(board1.equals((Object)board0));
      assertEquals("X5", piece0.toLabel());
      assertNotSame(board1, board0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        piece0.add(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Board board0 = new Board(0);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      int int0 = 1912;
      board0.nbPieces = 1488;
      int int1 = (-1519);
      Piece piece0 = new Piece(0, 1912, "sc", 2, (-1519));
      assertEquals(2, piece0.rotations);
      assertEquals(1912, piece0.size);
      assertEquals((-1519), piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(0, piece0.color);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      int int2 = 0;
      // Undeclared exception!
      board0.onseed(piece0, (-1519), 0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Board board0 = new Board((-3562));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-3562), board0.color);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      int[][] intArray0 = new int[9][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = (-775);
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-3562);
      intArray2[1] = (-3562);
      intArray2[2] = 21;
      intArray2[3] = 21;
      intArray2[4] = 21;
      intArray2[5] = (-3562);
      intArray2[6] = 21;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-3562);
      intArray3[1] = 0;
      intArray3[2] = 21;
      intArray3[3] = 20;
      intArray3[4] = 20;
      intArray3[5] = 21;
      intArray3[6] = 0;
      intArray3[7] = 20;
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = (-3562);
      intArray5[4] = (-3562);
      intArray5[5] = (-3562);
      intArray5[6] = 20;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = (-3562);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = (-775);
      intArray7[1] = 0;
      intArray7[2] = (-1);
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = (-3562);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = (-3562);
      intArray8[1] = 21;
      intArray8[2] = 20;
      intArray8[3] = 20;
      intArray8[4] = 0;
      intArray8[5] = (-3562);
      intArray8[6] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[8];
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray7));
      
      intArray9[0] = (-1384);
      intArray9[1] = 0;
      intArray9[2] = 20;
      intArray9[3] = (-1);
      intArray9[4] = 20;
      intArray9[5] = 10;
      intArray9[6] = (-1);
      intArray9[7] = 0;
      intArray0[8] = intArray9;
      board0.ab = intArray0;
      // Undeclared exception!
      try { 
        board0.onseed((Piece) null, 0, 318);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Board board0 = new Board(3396);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(3396, board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      int int0 = (-2542);
      Piece piece0 = board0.findPieceByType("");
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(3396, board0.color);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertNull(piece0);
      
      // Undeclared exception!
      try { 
        board0.fits((-2542), (Piece) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-755);
      Board board0 = new Board((-755));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-755), board0.color);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      board0.ij = null;
      LinkedList<Piece> linkedList0 = new LinkedList<Piece>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        board0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Board board0 = new Board(600);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(600, board0.color);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      board0.over = false;
      Piece piece0 = new Piece(21, "sc", 1696, 0);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(1696, piece0.rotations);
      assertEquals(21, piece0.size);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      int int0 = board0.scoreSeedsIfAdding(piece0, 0, 1696);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(600, board0.color);
      assertFalse(board0.over);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(1696, piece0.rotations);
      assertEquals(21, piece0.size);
      assertEquals(0, int0);
      assertEquals("sc", piece0.toLabel());
      
      String string0 = board0.toString();
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(600, board0.color);
      assertFalse(board0.over);
      assertNotNull(string0);
      
      boolean boolean0 = board0.overlaps(0, piece0, 0, 0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(600, board0.color);
      assertFalse(board0.over);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(1696, piece0.rotations);
      assertEquals(21, piece0.size);
      assertFalse(boolean0);
      assertEquals("sc", piece0.toLabel());
      
      // Undeclared exception!
      try { 
        board0.outside((Square) null, (-4765), 1696);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Board board0 = new Board(0);
      assertEquals(0, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(492, 21, "", 21, 0);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.rotations);
      assertEquals(21, piece0.size);
      assertEquals(492, piece0.color);
      assertNotNull(piece0);
      assertEquals("", piece0.toLabel());
      
      String string0 = board0.toString(0);
      assertEquals(0, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertNotNull(string0);
      assertEquals("", string0);
      
      piece0.count = 0;
      assertEquals("", piece0.toLabel());
      
      int int0 = board0.scoreSeedsIfAdding(piece0, 0, 0);
      assertEquals(0, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.rotations);
      assertEquals(21, piece0.size);
      assertEquals(492, piece0.color);
      assertEquals(1, int0);
      assertEquals("", piece0.toLabel());
      
      String string1 = piece0.toString();
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.rotations);
      assertEquals(21, piece0.size);
      assertEquals(492, piece0.color);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", piece0.toLabel());
      
      boolean boolean0 = board0.onseed(piece0, (-384), 0);
      assertEquals(0, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.rotations);
      assertEquals(21, piece0.size);
      assertEquals(492, piece0.color);
      assertFalse(boolean0);
      assertEquals("", piece0.toLabel());
      
      board0.add(piece0, 21, 21);
      assertEquals(0, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.rotations);
      assertEquals(21, piece0.size);
      assertEquals(492, piece0.color);
      assertEquals("", piece0.toLabel());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Board board0 = new Board(1205);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1205, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      Square square0 = new Square(0, 20);
      assertEquals(0, square0.i);
      assertEquals(20, square0.j);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      board0.score = 0;
      List<Square> list0 = board0.seeds();
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1205, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list0);
      assertFalse(list0.contains(square0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = board0.outside(square0, 524, 0);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1205, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, square0.i);
      assertEquals(20, square0.j);
      assertEquals(0, square0.value);
      assertTrue(boolean0);
      
      Piece piece0 = new Piece(694, 20, "sc", 0, 20);
      assertEquals(0, piece0.rotations);
      assertEquals(20, piece0.flips);
      assertEquals(20, piece0.size);
      assertEquals(694, piece0.color);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      board0.add(piece0, 20, 20);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1205, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.rotations);
      assertEquals(20, piece0.flips);
      assertEquals(20, piece0.size);
      assertEquals(694, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals("sc", piece0.toLabel());
      
      String string0 = board0.toString();
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1205, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string0);
      
      Piece piece1 = new Piece(0, 1205, string0, 0, 0);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(1205, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.flips);
      assertEquals(1205, piece1.size);
      assertEquals(0, piece1.rotations);
      assertEquals(0, piece1.color);
      assertNotNull(piece1);
      assertFalse(piece1.equals((Object)piece0));
      
      // Undeclared exception!
      board0.overlaps(0, piece1, (-132), 20);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Board board0 = new Board((-73));
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertEquals((-73), board0.color);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = (-73);
      intArray1[2] = (-73);
      intArray1[3] = 4951;
      intArray1[4] = (-938);
      intArray1[5] = (-73);
      intArray1[6] = (-2054);
      intArray1[7] = 0;
      intArray1[8] = 21;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-2054);
      intArray2[1] = 20;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2054);
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 20;
      intArray3[4] = 4951;
      intArray3[5] = (-2054);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-4464);
      intArray4[1] = 1067;
      intArray0[3] = intArray4;
      board0.ab = intArray0;
      Piece piece0 = board0.findPieceByType("org.scoutant.blokish.model.Board");
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertEquals((-73), board0.color);
      assertFalse(board0.over);
      assertNull(piece0);
      
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 1076, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Board board0 = new Board(2);
      assertEquals(2, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      String string0 = board0.toString(0);
      assertEquals(2, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Piece piece0 = new Piece(0, 20, "", 3391, 21);
      assertEquals(3391, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("", piece0.toLabel());
      
      piece0.type = "";
      assertEquals("", piece0.toLabel());
      
      board0.over = true;
      Piece piece1 = piece0.flip();
      assertEquals(3391, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.count);
      assertEquals(3391, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(20, piece1.size);
      assertNotNull(piece1);
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      Piece piece2 = piece1.rotate(2);
      assertEquals(3391, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.count);
      assertEquals(3391, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(20, piece1.size);
      assertEquals(20, piece2.size);
      assertEquals(0, piece2.count);
      assertEquals(3391, piece2.rotations);
      assertEquals(0, piece2.color);
      assertEquals(21, piece2.flips);
      assertNotNull(piece2);
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertEquals("", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      piece2.rotations = 0;
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertEquals("", piece2.toLabel());
      
      boolean boolean0 = board0.onseed(piece2, 0, (-1550));
      assertEquals(2, board0.color);
      assertTrue(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(20, piece1.size);
      assertEquals(20, piece2.size);
      assertEquals(0, piece2.count);
      assertEquals(0, piece2.rotations);
      assertEquals(0, piece2.color);
      assertEquals(21, piece2.flips);
      assertFalse(boolean0);
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertEquals("", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      String string1 = board0.toString();
      assertEquals(2, board0.color);
      assertTrue(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      board0.add(piece2, (-1464), 2);
      assertEquals(2, board0.color);
      assertTrue(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(20, piece1.size);
      assertEquals(20, piece2.size);
      assertEquals(0, piece2.count);
      assertEquals(0, piece2.rotations);
      assertEquals(0, piece2.color);
      assertEquals(21, piece2.flips);
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertEquals("", piece2.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      assertSame(piece2, piece1);
      assertSame(piece2, piece0);
      
      boolean boolean1 = board0.overlaps(20, piece1, 4, 3629);
      assertEquals(2, board0.color);
      assertTrue(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(20, piece1.size);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertSame(piece0, piece2);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      assertSame(piece1, piece2);
      
      piece0.size = 0;
      assertEquals("", piece0.toLabel());
      
      Piece piece3 = new Piece(20, 3629, string1, 21, 0);
      assertEquals(2, board0.color);
      assertTrue(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, piece3.rotations);
      assertEquals(0, piece3.flips);
      assertEquals(0, piece3.count);
      assertEquals(3629, piece3.size);
      assertEquals(20, piece3.color);
      assertNotNull(piece3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(piece3.equals((Object)piece2));
      assertFalse(piece3.equals((Object)piece0));
      assertFalse(piece3.equals((Object)piece1));
      
      // Undeclared exception!
      board0.add(piece3, 0, 10);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      Board board0 = new Board(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      String string0 = board0.toString(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Piece piece0 = board0.findPieceByType("N5");
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece0.color);
      assertEquals(2, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(5, piece0.count);
      assertNotNull(piece0);
      assertEquals("N5", piece0.toLabel());
      
      int int1 = 0;
      boolean boolean0 = board0.fits(0, piece0, 5, 0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece0.color);
      assertEquals(2, piece0.flips);
      assertEquals(4, piece0.size);
      assertEquals(5, piece0.count);
      assertFalse(boolean0);
      assertEquals("N5", piece0.toLabel());
      
      int int2 = (-1246);
      int int3 = 20;
      int int4 = (-630);
      // Undeclared exception!
      try { 
        piece0.add(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Board board0 = new Board(4);
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(4, "sc", (-1), 21);
      assertEquals((-1), piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(4, piece0.size);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      board0.add(piece0, (-1), (-13));
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals((-1), piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals("sc", piece0.toLabel());
      
      List<Piece> list0 = board0.pieces;
      assertNotNull(list0);
      assertFalse(list0.contains(piece0));
      assertFalse(list0.isEmpty());
      assertEquals(21, list0.size());
      
      board0.pieces = list0;
      assertFalse(list0.isEmpty());
      assertEquals(21, list0.size());
      assertFalse(board0.pieces.isEmpty());
      assertEquals(21, board0.pieces.size());
      
      board0.over = false;
      String string0 = piece0.toString();
      assertEquals((-1), piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(4, piece0.size);
      assertNotNull(string0);
      assertEquals("sc\n0 | 0 | 0 | 0\n0 | 0 | 0 | 0\n0 | 0 | 0 | 0\n0 | 0 | 0 | 0\n", string0);
      assertEquals("sc", piece0.toLabel());
      
      String string1 = board0.toString(2);
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertNotNull(string1);
      assertEquals("0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      board0.add(piece0, 4, 4);
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals((-1), piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(4, piece0.size);
      assertEquals("sc", piece0.toLabel());
      
      boolean boolean0 = board0.overlaps(4, piece0, 0, (-1));
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals((-1), piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(4, piece0.size);
      assertFalse(boolean0);
      assertEquals("sc", piece0.toLabel());
      
      Square square0 = new Square(4, (-887), (-1));
      assertEquals((-887), square0.j);
      assertEquals((-1), square0.value);
      assertEquals(4, square0.i);
      assertNotNull(square0);
      
      boolean boolean1 = board0.outside(square0, 4, (-3595));
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals((-887), square0.j);
      assertEquals((-1), square0.value);
      assertEquals(4, square0.i);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Board board0 = new Board(2);
      assertEquals(2, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      String string0 = board0.toString(20);
      assertEquals(2, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string0);
      
      Piece piece0 = new Piece(0, 21, "m%>8e@8C", 20, 21);
      assertEquals(0, piece0.color);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      
      Piece piece1 = piece0.rotate(0);
      assertEquals(0, piece0.color);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals(20, piece1.rotations);
      assertEquals(21, piece1.size);
      assertNotNull(piece1);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      int int0 = board0.scoreSeedsIfAdding(piece1, 296, 0);
      assertEquals(2, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals(20, piece1.rotations);
      assertEquals(21, piece1.size);
      assertEquals(1, int0);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.fits(0, piece1, 3, 21);
      assertEquals(2, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.flips);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals(20, piece1.rotations);
      assertEquals(21, piece1.size);
      assertFalse(boolean0);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      piece0.rotations = (-2589);
      boolean boolean1 = board0.onseed(piece0, 3602, 3001);
      assertEquals(2, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.flips);
      assertEquals((-2589), piece0.rotations);
      assertEquals(0, piece0.count);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(piece0, piece1);
      
      boolean boolean2 = board0.overlaps(0, piece1, 1, 0);
      assertEquals(2, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.color);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.flips);
      assertEquals((-2589), piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.count);
      assertEquals(21, piece1.size);
      assertEquals((-2589), piece1.rotations);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Board board0 = new Board(734);
      assertEquals(0, board0.score);
      assertEquals(734, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(734, "1Se11", 734, 734);
      assertEquals(734, piece0.size);
      assertEquals(734, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(734, piece0.rotations);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("1Se11", piece0.toLabel());
      
      boolean boolean0 = board0.fits(734, piece0, 20, 734);
      assertEquals(0, board0.score);
      assertEquals(734, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(734, piece0.size);
      assertEquals(734, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(734, piece0.rotations);
      assertEquals(0, piece0.count);
      assertFalse(boolean0);
      assertEquals("1Se11", piece0.toLabel());
      
      boolean boolean1 = board0.fits(0, piece0, 734, 328);
      assertEquals(0, board0.score);
      assertEquals(734, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(734, piece0.size);
      assertEquals(734, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(734, piece0.rotations);
      assertEquals(0, piece0.count);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("1Se11", piece0.toLabel());
      
      boolean boolean2 = board0.fits(319, piece0, 734, 521);
      assertEquals(0, board0.score);
      assertEquals(734, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(734, piece0.size);
      assertEquals(734, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(734, piece0.rotations);
      assertEquals(0, piece0.count);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("1Se11", piece0.toLabel());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Board board0 = new Board(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      String string0 = board0.toString((-1));
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Piece piece0 = new Piece(0, 0, "sc", 20, 0);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      Piece piece1 = piece0.clone();
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(0, piece1.flips);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.size);
      assertEquals(0, piece1.count);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      List<Square> list0 = piece1.squares((-1));
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(0, piece1.flips);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.size);
      assertEquals(0, piece1.count);
      assertNotNull(list0);
      assertTrue(piece0.equals((Object)piece1));
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      String string1 = board0.toString(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string1);
      assertEquals("", string1);
      
      board0.add(piece1, 0, 0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(0, piece1.flips);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.size);
      assertEquals(0, piece1.count);
      assertTrue(piece0.equals((Object)piece1));
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      List<Square> list1 = board0.seeds();
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      
      String string2 = board0.toString(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Board board0 = new Board(4260);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(4260, board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(21, 21, "", 4260, 21);
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.color);
      assertEquals(4260, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertNotNull(piece0);
      assertEquals("", piece0.toLabel());
      
      Piece piece1 = piece0.clone();
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.color);
      assertEquals(4260, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.color);
      assertEquals(21, piece1.size);
      assertEquals(0, piece1.count);
      assertEquals(4260, piece1.rotations);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      Piece piece2 = piece1.clone();
      assertEquals(0, piece0.count);
      assertEquals(21, piece0.size);
      assertEquals(21, piece0.color);
      assertEquals(4260, piece0.rotations);
      assertEquals(21, piece0.flips);
      assertEquals(21, piece1.flips);
      assertEquals(0, piece1.color);
      assertEquals(21, piece1.size);
      assertEquals(0, piece1.count);
      assertEquals(4260, piece1.rotations);
      assertEquals(21, piece2.flips);
      assertEquals(0, piece2.count);
      assertEquals(0, piece2.color);
      assertEquals(4260, piece2.rotations);
      assertEquals(21, piece2.size);
      assertNotNull(piece2);
      assertTrue(piece0.equals((Object)piece1));
      assertTrue(piece1.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece0));
      assertTrue(piece2.equals((Object)piece1));
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      assertEquals("", piece2.toLabel());
      assertNotSame(piece0, piece2);
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      assertNotSame(piece1, piece2);
      assertNotSame(piece2, piece1);
      assertNotSame(piece2, piece0);
      
      piece1.color = 0;
      assertEquals("", piece0.toLabel());
      assertEquals("", piece1.toLabel());
      
      board0.scoreSeedsIfAdding(piece1, 21, 21);
      board0.onseed(piece2, 21, 1);
      board0.findPieceByType(" |am{E=6QV}d");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Board board0 = new Board(2236);
      assertEquals(2236, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(20, ", ", 2236, 0);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(2236, piece0.rotations);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.flips);
      assertNotNull(piece0);
      assertEquals(", ", piece0.toLabel());
      
      Piece piece1 = piece0.clone();
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(2236, piece0.rotations);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(2236, piece1.rotations);
      assertEquals(20, piece1.size);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(0, piece1.count);
      assertNotNull(piece1);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals(", ", piece0.toLabel());
      assertEquals(", ", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
      
      boolean boolean0 = board0.fits(2236, piece1, 2236, 2236);
      assertEquals(2236, board0.color);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, piece0.size);
      assertEquals(0, piece0.count);
      assertEquals(2236, piece0.rotations);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(2236, piece1.rotations);
      assertEquals(20, piece1.size);
      assertEquals(0, piece1.color);
      assertEquals(0, piece1.flips);
      assertEquals(0, piece1.count);
      assertFalse(boolean0);
      assertTrue(piece1.equals((Object)piece0));
      assertEquals(", ", piece0.toLabel());
      assertEquals(", ", piece1.toLabel());
      assertNotSame(piece0, piece1);
      assertNotSame(piece1, piece0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-1);
      Board board0 = new Board((-1));
      assertEquals((-1), board0.color);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      int int1 = 2183;
      int int2 = 0;
      Piece piece0 = new Piece((-1), 2183, "L3", (-2551), 0);
      assertEquals(2183, piece0.size);
      assertEquals(0, piece0.flips);
      assertEquals((-1), piece0.color);
      assertEquals((-2551), piece0.rotations);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("L3", piece0.toLabel());
      
      // Undeclared exception!
      board0.scoreSeedsIfAdding(piece0, 0, (-2551));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Board board0 = new Board(2);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(2, board0.color);
      assertNotNull(board0);
      
      int int0 = 0;
      Square square0 = new Square(0, 20);
      assertEquals(0, square0.i);
      assertEquals(0, square0.value);
      assertEquals(20, square0.j);
      assertNotNull(square0);
      
      square0.j = 0;
      boolean boolean0 = board0.outside(square0, 3, 0);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(2, board0.color);
      assertEquals(0, square0.j);
      assertEquals(0, square0.i);
      assertEquals(0, square0.value);
      assertFalse(boolean0);
      
      Piece piece0 = new Piece(0, "", 0, 0);
      assertEquals(0, piece0.rotations);
      assertEquals(0, piece0.count);
      assertEquals(0, piece0.size);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.flips);
      assertNotNull(piece0);
      assertEquals("", piece0.toLabel());
      
      // Undeclared exception!
      try { 
        piece0.flip();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Board board0 = new Board(0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertNotNull(board0);
      
      Square square0 = new Square(0, 1000, 0);
      assertEquals(0, square0.i);
      assertEquals(1000, square0.j);
      assertEquals(0, square0.value);
      assertNotNull(square0);
      
      boolean boolean0 = board0.outside(square0, 2, 0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertEquals(0, square0.i);
      assertEquals(1000, square0.j);
      assertEquals(0, square0.value);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      Board board0 = new Board(0);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertEquals(0, board0.color);
      assertNotNull(board0);
      
      Piece piece0 = null;
      // Undeclared exception!
      try { 
        board0.fits(0, (Piece) null, 5, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Board board0 = new Board((-138));
      assertEquals(0, board0.score);
      assertEquals((-138), board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      board0.over = false;
      List<Square> list0 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals((-138), board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = board0.toString(10);
      assertEquals(0, board0.score);
      assertEquals((-138), board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(string0);
      assertEquals("0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n", string0);
      
      board0.nbPieces = (-138);
      board0.size = (-684);
      String string1 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals((-138), board0.nbPieces);
      assertEquals((-138), board0.color);
      assertEquals((-684), board0.size);
      assertFalse(board0.over);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      List<Square> list1 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals((-138), board0.nbPieces);
      assertEquals((-138), board0.color);
      assertEquals((-684), board0.size);
      assertFalse(board0.over);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-38);
      Board board0 = new Board((-38));
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals((-38), board0.color);
      assertNotNull(board0);
      
      board0.over = true;
      String string0 = board0.toString((-38));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertTrue(board0.over);
      assertEquals((-38), board0.color);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Piece piece0 = null;
      boolean boolean0 = board0.fits((-38), (Piece) null, (-38), (-38));
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertTrue(board0.over);
      assertEquals((-38), board0.color);
      assertFalse(boolean0);
      
      List<Square> list0 = board0.seeds();
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertTrue(board0.over);
      assertEquals((-38), board0.color);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, (-38), (-38));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Board board0 = new Board(3289);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(3289, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 3289, 669);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3;
      Board board0 = new Board(3);
      assertEquals(3, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(3, "sc", 0, (-1469));
      assertEquals(3, piece0.size);
      assertEquals(0, piece0.color);
      assertEquals((-1469), piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(0, piece0.rotations);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      piece0.count = 2;
      assertEquals("sc", piece0.toLabel());
      
      // Undeclared exception!
      try { 
        piece0.add(1618, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 20;
      Board board0 = new Board(20);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.color);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType((String) null);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.color);
      assertEquals(20, board0.size);
      assertNull(piece0);
      
      // Undeclared exception!
      try { 
        board0.overlaps(20, (Piece) null, (-131), 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Board board0 = new Board(871);
      assertEquals(871, board0.color);
      assertFalse(board0.over);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertNotNull(board0);
      
      // Undeclared exception!
      try { 
        board0.toString(871);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Board board0 = new Board(0);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertNotNull(board0);
      
      List<Square> list0 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Piece piece0 = new Piece(0, 4, "sc", 4, 0);
      assertEquals(4, piece0.size);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece0.count);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      boolean boolean0 = board0.overlaps(1091, piece0, 0, 0);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertEquals(4, piece0.size);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.flips);
      assertEquals(4, piece0.rotations);
      assertEquals(0, piece0.count);
      assertFalse(boolean0);
      assertEquals("sc", piece0.toLabel());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Board board0 = new Board(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      int[][] intArray0 = new int[4][9];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 20;
      intArray1[2] = 0;
      intArray1[3] = 20;
      intArray1[4] = 20;
      intArray1[5] = 0;
      intArray1[6] = 21;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 0;
      intArray3[1] = 21;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 20;
      intArray4[1] = 0;
      intArray0[3] = intArray4;
      board0.ij = intArray0;
      String string0 = board0.toString(0);
      assertEquals(0, board0.color);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(string0);
      assertEquals("", string0);
      
      board0.color = 0;
      // Undeclared exception!
      try { 
        board0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Board board0 = new Board(2008);
      assertFalse(board0.over);
      assertEquals(2008, board0.color);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(board0);
      
      Piece piece0 = new Piece(0, 0, "sc", 20, 2008);
      assertEquals(0, piece0.size);
      assertEquals(2008, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertNotNull(piece0);
      assertEquals("sc", piece0.toLabel());
      
      Piece piece1 = piece0.rotate(2008);
      assertEquals(0, piece0.size);
      assertEquals(2008, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece1.size);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals(2008, piece1.flips);
      assertNotNull(piece1);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      boolean boolean0 = board0.onseed(piece1, 0, 0);
      assertFalse(board0.over);
      assertEquals(2008, board0.color);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.size);
      assertEquals(2008, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertEquals(0, piece1.size);
      assertEquals(20, piece1.rotations);
      assertEquals(0, piece1.count);
      assertEquals(0, piece1.color);
      assertEquals(2008, piece1.flips);
      assertFalse(boolean0);
      assertEquals("sc", piece0.toLabel());
      assertEquals("sc", piece1.toLabel());
      assertSame(piece0, piece1);
      assertSame(piece1, piece0);
      
      List<Square> list0 = board0.seeds();
      assertFalse(board0.over);
      assertEquals(2008, board0.color);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Square> list1 = board0.seeds();
      assertFalse(board0.over);
      assertEquals(2008, board0.color);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      
      board0.add(piece0, 430, 1);
      assertFalse(board0.over);
      assertEquals(2008, board0.color);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(0, piece0.size);
      assertEquals(2008, piece0.flips);
      assertEquals(0, piece0.color);
      assertEquals(0, piece0.count);
      assertEquals(20, piece0.rotations);
      assertEquals("sc", piece0.toLabel());
      assertSame(piece0, piece1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Board board0 = new Board(2);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, board0.color);
      assertNotNull(board0);
      
      board0.nbPieces = 0;
      List<Square> list0 = board0.seeds();
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(20, board0.size);
      assertEquals(2, board0.color);
      assertEquals(0, board0.nbPieces);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        board0.add((Piece) null, 2424, 2424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Board board0 = new Board(1574);
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(1574, board0.color);
      assertNotNull(board0);
      
      String string0 = board0.toString();
      assertEquals(0, board0.score);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(1574, board0.color);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Board board0 = new Board(4);
      assertEquals(0, board0.score);
      assertEquals(4, board0.color);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      board0.nbPieces = 4;
      String string0 = board0.toString(4);
      assertEquals(0, board0.score);
      assertEquals(4, board0.nbPieces);
      assertEquals(4, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(string0);
      assertEquals("0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n", string0);
      
      List<Square> list0 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals(4, board0.nbPieces);
      assertEquals(4, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Square> list1 = board0.seeds();
      assertEquals(0, board0.score);
      assertEquals(4, board0.nbPieces);
      assertEquals(4, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      
      Square square0 = new Square(4, 4, 0);
      assertEquals(0, square0.value);
      assertEquals(4, square0.j);
      assertEquals(4, square0.i);
      assertNotNull(square0);
      
      boolean boolean0 = board0.outside(square0, (-1556), 4);
      assertEquals(0, board0.score);
      assertEquals(4, board0.nbPieces);
      assertEquals(4, board0.color);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertEquals(0, square0.value);
      assertEquals(4, square0.j);
      assertEquals(4, square0.i);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Board board0 = new Board((-1181));
      assertEquals((-1181), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("aAd,yVcdPNg");
      assertEquals((-1181), board0.color);
      assertEquals(0, board0.score);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertFalse(board0.over);
      assertNull(piece0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Board board0 = new Board(0);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertNotNull(board0);
      
      Piece piece0 = board0.findPieceByType("32>FxP)HjAx");
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(0, board0.score);
      assertFalse(board0.over);
      assertEquals(0, board0.color);
      assertNull(piece0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Board board0 = new Board(3);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(board0);
      
      Square square0 = new Square(0, 3);
      assertEquals(3, square0.j);
      assertEquals(0, square0.value);
      assertEquals(0, square0.i);
      assertNotNull(square0);
      
      square0.value = 13;
      boolean boolean0 = board0.outside(square0, 0, 469);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, board0.color);
      assertEquals(0, board0.score);
      assertEquals(3, square0.j);
      assertEquals(13, square0.value);
      assertEquals(0, square0.i);
      assertTrue(boolean0);
      
      String string0 = board0.toString(3);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(string0);
      assertEquals("0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0\n", string0);
      
      Piece piece0 = new Piece((-4166), 0, "1pO5<a:FFFc%W+4M= ", 155, 13);
      assertEquals(0, piece0.size);
      assertEquals(13, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(155, piece0.rotations);
      assertEquals((-4166), piece0.color);
      assertNotNull(piece0);
      assertEquals("1pO5<a:FFFc%W+4M= ", piece0.toLabel());
      
      int int0 = board0.scoreSeedsIfAdding(piece0, 4, (-1441579392));
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, board0.color);
      assertEquals(0, board0.score);
      assertEquals(0, piece0.size);
      assertEquals(13, piece0.flips);
      assertEquals(0, piece0.count);
      assertEquals(155, piece0.rotations);
      assertEquals((-4166), piece0.color);
      assertEquals(1, int0);
      assertEquals("1pO5<a:FFFc%W+4M= ", piece0.toLabel());
      
      String string1 = board0.toString(0);
      assertFalse(board0.over);
      assertEquals(21, board0.nbPieces);
      assertEquals(20, board0.size);
      assertEquals(3, board0.color);
      assertEquals(0, board0.score);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Board board0 = new Board(2);
      //  // Unstable assertion: assertEquals(0, board0.score);
      //  // Unstable assertion: assertEquals(21, board0.nbPieces);
      //  // Unstable assertion: assertEquals(2, board0.color);
      //  // Unstable assertion: assertEquals(20, board0.size);
      //  // Unstable assertion: assertFalse(board0.over);
      //  // Unstable assertion: assertNotNull(board0);
      
      Piece piece0 = new Piece(21, "sc", 2, 2);
      //  // Unstable assertion: assertEquals(0, piece0.count);
      //  // Unstable assertion: assertEquals(21, piece0.size);
      //  // Unstable assertion: assertEquals(2, piece0.rotations);
      //  // Unstable assertion: assertEquals(0, piece0.color);
      //  // Unstable assertion: assertEquals(2, piece0.flips);
      //  // Unstable assertion: assertNotNull(piece0);
      //  // Unstable assertion: assertEquals("sc", piece0.toLabel());
      
      piece0.rotations = 2;
      //  // Unstable assertion: assertEquals("sc", piece0.toLabel());
      
      Piece piece1 = piece0.rotate(20);
      //  // Unstable assertion: assertEquals(0, piece0.count);
      //  // Unstable assertion: assertEquals(21, piece0.size);
      //  // Unstable assertion: assertEquals(2, piece0.rotations);
      //  // Unstable assertion: assertEquals(0, piece0.color);
      //  // Unstable assertion: assertEquals(2, piece0.flips);
      //  // Unstable assertion: assertEquals(0, piece1.count);
      //  // Unstable assertion: assertEquals(21, piece1.size);
      //  // Unstable assertion: assertEquals(2, piece1.flips);
      //  // Unstable assertion: assertEquals(0, piece1.color);
      //  // Unstable assertion: assertEquals(2, piece1.rotations);
      //  // Unstable assertion: assertNotNull(piece1);
      //  // Unstable assertion: assertEquals("sc", piece0.toLabel());
      //  // Unstable assertion: assertEquals("sc", piece1.toLabel());
      //  // Unstable assertion: assertSame(piece0, piece1);
      //  // Unstable assertion: assertSame(piece1, piece0);
      
      piece0.reset(piece1);
      //  // Unstable assertion: assertEquals(0, piece0.count);
      //  // Unstable assertion: assertEquals(21, piece0.size);
      //  // Unstable assertion: assertEquals(2, piece0.rotations);
      //  // Unstable assertion: assertEquals(0, piece0.color);
      //  // Unstable assertion: assertEquals(2, piece0.flips);
      //  // Unstable assertion: assertEquals(0, piece1.count);
      //  // Unstable assertion: assertEquals(21, piece1.size);
      //  // Unstable assertion: assertEquals(2, piece1.flips);
      //  // Unstable assertion: assertEquals(0, piece1.color);
      //  // Unstable assertion: assertEquals(2, piece1.rotations);
      //  // Unstable assertion: assertEquals("sc", piece0.toLabel());
      //  // Unstable assertion: assertEquals("sc", piece1.toLabel());
      //  // Unstable assertion: assertSame(piece0, piece1);
      //  // Unstable assertion: assertSame(piece1, piece0);
      
      Piece piece2 = new Piece(21, "sc", 21, 2);
      //  // Unstable assertion: assertEquals(2, piece2.flips);
      //  // Unstable assertion: assertEquals(0, piece2.color);
      //  // Unstable assertion: assertEquals(21, piece2.size);
      //  // Unstable assertion: assertEquals(21, piece2.rotations);
      //  // Unstable assertion: assertEquals(0, piece2.count);
      //  // Unstable assertion: assertNotNull(piece2);
      //  // Unstable assertion: assertFalse(piece2.equals((Object)piece0));
      //  // Unstable assertion: assertFalse(piece2.equals((Object)piece1));
      //  // Unstable assertion: assertEquals("sc", piece2.toLabel());
      
      int int0 = board0.scoreSeedsIfAdding(piece2, 12, 21);
      //  // Unstable assertion: assertEquals(0, board0.score);
      //  // Unstable assertion: assertEquals(21, board0.nbPieces);
      //  // Unstable assertion: assertEquals(2, board0.color);
      //  // Unstable assertion: assertEquals(20, board0.size);
      //  // Unstable assertion: assertFalse(board0.over);
      //  // Unstable assertion: assertEquals(2, piece2.flips);
      //  // Unstable assertion: assertEquals(0, piece2.color);
      //  // Unstable assertion: assertEquals(21, piece2.size);
      //  // Unstable assertion: assertEquals(21, piece2.rotations);
      //  // Unstable assertion: assertEquals(0, piece2.count);
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertFalse(piece2.equals((Object)piece0));
      //  // Unstable assertion: assertFalse(piece2.equals((Object)piece1));
      //  // Unstable assertion: assertEquals("sc", piece2.toLabel());
      //  // Unstable assertion: assertNotSame(piece2, piece0);
      //  // Unstable assertion: assertNotSame(piece2, piece1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Board board0 = new Board((-817));
      List<Square> list0 = board0.seeds();
      assertEquals(0, list0.size());
      
      board0.toString(0);
      Piece piece0 = new Piece((-817), 20, "sc", 20, (-2682));
      Piece piece1 = piece0.flip();
      boolean boolean0 = board0.fits((-817), piece1, 0, (-2682));
      assertFalse(boolean0);
      assertFalse(board0.over);
      assertEquals((-817), board0.color);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Piece piece0 = null;
      int[][] intArray0 = new int[2][1];
      int[] intArray1 = new int[4];
      intArray1[2] = (-1);
      Board board0 = new Board(4);
      board0.fits((-27), (Piece) null, (-27), (-160176577));
      int int0 = 1;
      // Undeclared exception!
      try { 
        board0.overlaps(2, (Piece) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Board board0 = new Board(107);
      Piece piece0 = board0.findPieceByType("V5");
      board0.scoreSeedsIfAdding(piece0, 3, 4);
      board0.onseed(piece0, 3, 0);
      board0.toString();
      board0.toString();
      board0.score = 1;
      String string0 = ",`";
      piece0.clone();
      board0.findPieceByType("");
      board0.findPieceByType(",`");
      board0.findPieceByType("V5");
      int int0 = (-2377);
      // Undeclared exception!
      try { 
        board0.scoreSeedsIfAdding((Piece) null, 3, (-2377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1;
      Board board0 = new Board(1);
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I4");
      int int1 = 1;
      Piece piece1 = piece0.rotate(1);
      piece1.squares((-1529));
      Piece.serialize(piece0);
      Piece.serialize(piece1);
      board0.fits(2, piece0, 0, 2);
      board0.seeds();
      Square square0 = new Square(4, (-1454), 0);
      // Undeclared exception!
      try { 
        piece0.add(square0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Board board0 = new Board(1);
      board0.over = false;
      Piece piece0 = board0.findPieceByType("I3");
      Piece piece1 = piece0.rotate(1);
      piece1.squares(3);
      Piece.serialize(piece0);
      Piece.serialize(piece0);
      board0.fits(2, piece0, 6, 2);
      board0.seeds();
      Square square0 = new Square(3, (-1454), 6);
      Piece piece2 = piece1.flip();
      board0.findPieceByType((String) null);
      board0.overlaps((-1206), piece1, 3, 1);
      board0.add(piece1, 3, 1);
      board0.add(piece1, 1, (-2109));
      board0.scoreSeedsIfAdding(piece1, 1, 91);
      board0.toString();
      board0.toString(1);
      Piece piece3 = piece1.rotate(3);
      board0.scoreSeedsIfAdding(piece3, (-121), 2);
      board0.scoreSeedsIfAdding(piece2, (-298), 1);
      board0.toString();
      board0.toString();
      assertEquals(6, board0.score);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Board board0 = new Board((-4618));
      int int0 = (-2782);
      Piece piece0 = new Piece(20, "sc", 0, (-2682));
      board0.fits((-1250), piece0, 20, 18);
      piece0.flips = 4;
      piece0.type = "3";
      LinkedList<Piece> linkedList0 = new LinkedList<Piece>();
      board0.pieces = (List<Piece>) linkedList0;
      Piece piece1 = piece0.clone();
      board0.overlaps(0, piece1, 0, (-4618));
      board0.toString();
      board0.fits(1902, piece1, 0, 20);
      linkedList0.spliterator();
      Square square0 = new Square(20, 3588, 0);
      // Undeclared exception!
      try { 
        piece1.add(square0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Piece", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Square square0 = new Square(2845, 3466);
      assertEquals(3466, square0.j);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Board board0 = new Board(0);
      Square square0 = new Square(21, 20, 0);
      board0.seeds();
      board0.outside(square0, 1308, 20);
      List<Piece> list0 = board0.pieces;
      board0.pieces = list0;
      int[][] intArray0 = new int[4][2];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 21;
      intArray1[4] = 20;
      intArray1[5] = 0;
      intArray1[6] = 1308;
      intArray1[7] = 20;
      intArray1[8] = 21;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 1650;
      intArray2[3] = 20;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 21;
      intArray3[1] = 21;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 1308;
      intArray4[1] = 21;
      intArray4[2] = 0;
      intArray4[3] = 20;
      intArray4[4] = 21;
      intArray4[5] = 0;
      intArray4[6] = 618;
      intArray0[3] = intArray4;
      board0.ij = intArray0;
      // Undeclared exception!
      try { 
        board0.overlaps(1308, (Piece) null, 0, (-3494));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Board", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 26 18:45:47 GMT 2018
 */

package org.scoutant.blokish.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scoutant.blokish.model.Game;
import org.scoutant.blokish.model.Move;
import org.scoutant.blokish.model.Piece;
import org.scoutant.blokish.model.Square;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, 20, "sc", 0, 2198);
      Square square0 = new Square(0, 0, (-141));
      piece0.add(square0);
      int int0 = game0.scoreEnemySeedsIfAdding(2198, piece0, 791, 0);
      assertEquals(20, game0.size);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Game game0 = new Game();
      String string0 = game0.toString();
      assertEquals("# moves : 0", string0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(0, "sc", (-965), (-568));
      boolean boolean0 = game0.valid(piece0, 4, (-568));
      assertFalse(boolean0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(0, "sc", (-965), (-568));
      Move move0 = new Move(piece0, 0, 2);
      game0.historize(move0);
      // Undeclared exception!
      try { 
        game0.replay(game0.moves);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Game game0 = new Game();
      boolean boolean0 = game0.replay(game0.moves);
      assertEquals(20, game0.size);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Game game0 = new Game();
      assertEquals(3, game0.winner());
      
      Piece piece0 = new Piece(20, "sc", 20, 20);
      piece0.count = 20;
      game0.add(piece0, 20, 20);
      int int0 = game0.winner();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Game game0 = new Game();
      boolean boolean0 = game0.over();
      assertFalse(boolean0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(2, "", 20, 2);
      Move move0 = new Move(piece0, (-3673), 2, 0);
      game0.historize(move0);
      String string0 = game0.toString();
      assertEquals("# moves : 1\n-3673:2:0:", string0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Game game0 = new Game();
      List<Move> list0 = game0.deserialize("sc");
      assertEquals(20, game0.size);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 20, 20);
      Move move0 = new Move(piece0, 20, 20);
      // Undeclared exception!
      try { 
        game0.play(move0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // android/util/Log
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }
}

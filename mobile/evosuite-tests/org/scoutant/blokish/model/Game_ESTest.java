/*
 * This file was automatically generated by EvoSuite
<<<<<<< HEAD
 * Fri Oct 26 18:45:47 GMT 2018
=======
 * Fri Oct 26 19:16:25 GMT 2018
>>>>>>> dev
 */

package org.scoutant.blokish.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.scoutant.blokish.model.Game;
import org.scoutant.blokish.model.Move;
import org.scoutant.blokish.model.Piece;
import org.scoutant.blokish.model.Square;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test_NewGame()  throws Throwable  {
      Game game0 = new Game();
      String string0 = game0.toString();
      assertEquals("# moves : 0", string0);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test_NullHistorize()  throws Throwable  {
      Game game0 = new Game();
      game0.historize((Move) null);
      // Undeclared exception!
      try { 
        game0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Move", e);
      }
  }

  @Test(timeout = 4000)
  public void test_InvalidMove()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece((-1747), 0, "", 20, 714);
      Move move0 = new Move(piece0, (-153), 20, 0);
      // Undeclared exception!

      assertFalse(game0.play(move0));
  }

  @Test(timeout = 4000)
  public void test_PlayMove()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 20, 20);
      Move move0 = new Move(piece0, 0, 0, 0);
      Square square0 = new Square(0, 0);
      piece0.add(square0);
      // Undeclared exception!
      assertTrue(game0.play(move0));
  }

  @Test(timeout = 4000)
  public void test_GameSize()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(503, "sc", 503, 3);
      game0.fits(piece0, 503, (-1811));
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test_GameFitsPiece()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, 20, "sc", 20, 20);
      boolean boolean0 = game0.fits(piece0, 20, 20);
      assertEquals(20, game0.size);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_NullPiece()  throws Throwable  {
      Game game0 = new Game();
      boolean boolean0 = game0.valid((Piece) null, 975, 975);
      assertEquals(20, game0.size);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_FalseValidCoord()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "sc", 20, 20);
      Move move0 = new Move(piece0, 0, 0, 0);
      boolean boolean0 = game0.valid(move0.ghost, 1, 20);
      assertEquals(20, game0.size);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_Size()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(1261, 0, "&9e21\"`7", 20, 0);
      game0.add(piece0, 0, 2131558402);
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test_ReplayingHistory()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(3, "K|x&/lW", (-3721), 3);
      Move move0 = new Move(piece0, (-3721), 20, 0);
      game0.historize(move0);
      // Undeclared exception!
      try { 
        game0.replay(game0.moves);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test_Replay()  throws Throwable  {
      Game game0 = new Game();
      LinkedList<Move> linkedList0 = new LinkedList<Move>();
      boolean boolean0 = game0.replay(linkedList0);
      assertEquals(20, game0.size);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_DefaultWinner()  throws Throwable  {
      Game game0 = new Game();
      int int0 = game0.winner();
      assertEquals(20, game0.size);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test_GameNotOver()  throws Throwable  {
      Game game0 = new Game();
      boolean boolean0 = game0.over();
      assertEquals(20, game0.size);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_Reset()  throws Throwable  {
      Game game0 = new Game();
      game0.reset();
      assertEquals(20, game0.size);
  }

  @Test(timeout = 4000)
  public void test_Scoring()  throws Throwable  {
      Game game0 = new Game();
      Piece piece0 = new Piece(20, "`FD", (-2), 20);
      int int0 = game0.scoreEnemySeedsIfAdding(1211, piece0, 3, 20);
      assertEquals(20, game0.size);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_NullMove()  throws Throwable  {
      Game game0 = new Game();
      // Undeclared exception!
      try { 
        game0.valid((Move) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.scoutant.blokish.model.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test_Deserialize()  throws Throwable  {
      Game game0 = new Game();
      List<Move> list0 = game0.deserialize("played move : ");
      assertEquals(20, game0.size);
      assertEquals(0, list0.size());
  }
}
